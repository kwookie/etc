{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["TrainingsvolumenRechner","currentHours","setCurrentHours","useState","currentMinutes","setCurrentMinutes","currentLongRun","setCurrentLongRun","volumeChanges","setVolumeChanges","Array","fill","longRunChanges","setLongRunChanges","results","setResults","React","createElement","className","type","value","onChange","e","Number","target","placeholder","map","_","i","key","newChanges","onClick","calculateVolumes","newResults","totalMinutes","longRunMinutes","push","week","Math","round","resetForm","length","r","floor","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","App"],"mappings":"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","file":"static/js/main.791b9779.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport default function TrainingsvolumenRechner() {\n  const [currentHours, setCurrentHours] = useState(0);\n  const [currentMinutes, setCurrentMinutes] = useState(0);\n  const [currentLongRun, setCurrentLongRun] = useState(0);\n  const [volumeChanges, setVolumeChanges] = useState(Array(12).fill(0));\n  const [longRunChanges, setLongRunChanges] = useState(Array(12).fill(0));\n  const [results, setResults] = useState([]);\n\n  const calculateVolumes = () => {\n    const newResults = [];\n    let totalMinutes = currentHours * 60 + currentMinutes;\n    let longRunMinutes = currentLongRun;\n\n    for (let i = 0; i < 12; i++) {\n      totalMinutes = totalMinutes * (1 + volumeChanges[i] / 100);\n      longRunMinutes = longRunMinutes * (1 + longRunChanges[i] / 100);\n      newResults.push({\n        week: i + 1,\n        totalMinutes: Math.round(totalMinutes),\n        longRunMinutes: Math.round(longRunMinutes),\n      });\n    }\n    setResults(newResults);\n  };\n\n  const resetForm = () => {\n    setCurrentHours(0);\n    setCurrentMinutes(0);\n    setCurrentLongRun(0);\n    setVolumeChanges(Array(12).fill(0));\n    setLongRunChanges(Array(12).fill(0));\n    setResults([]);\n  };\n\n  return (\n    <div className=\"container my-6\">\n      <div className=\"columns is-centered\">\n        <div className=\"column is-half\">\n          <div className=\"box\">\n            <h1 className=\"title has-text-blue\">Trainingsvolumen Rechner</h1>\n\n            <div className=\"field\">\n              <label className=\"label\">Aktuelle Stunden</label>\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  type=\"number\"\n                  value={currentHours}\n                  onChange={(e) => setCurrentHours(Number(e.target.value))}\n                  placeholder=\"Stunden\"\n                />\n              </div>\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\">Aktuelle Minuten</label>\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  type=\"number\"\n                  value={currentMinutes}\n                  onChange={(e) => setCurrentMinutes(Number(e.target.value))}\n                  placeholder=\"Minuten\"\n                />\n              </div>\n            </div>\n\n            <div className=\"field\">\n              <label className=\"label\">Langer Lauf (Minuten)</label>\n              <div className=\"control\">\n                <input\n                  className=\"input\"\n                  type=\"number\"\n                  value={currentLongRun}\n                  onChange={(e) => setCurrentLongRun(Number(e.target.value))}\n                  placeholder=\"Langer Lauf (Minuten)\"\n                />\n              </div>\n            </div>\n\n            <h2 className=\"subtitle\">Prozentuale Änderungen pro Woche</h2>\n            <div className=\"columns is-multiline\">\n              {volumeChanges.map((_, i) => (\n                <div key={i} className=\"column is-half\">\n                  <div className=\"field\">\n                    <label className=\"label\">Woche {i + 1}</label>\n                    <div className=\"control\">\n                      <input\n                        className=\"input\"\n                        type=\"number\"\n                        value={volumeChanges[i]}\n                        onChange={(e) => {\n                          const newChanges = [...volumeChanges];\n                          newChanges[i] = Number(e.target.value);\n                          setVolumeChanges(newChanges);\n                        }}\n                        placeholder=\"Volumen %\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"field\">\n                    <div className=\"control\">\n                      <input\n                        className=\"input\"\n                        type=\"number\"\n                        value={longRunChanges[i]}\n                        onChange={(e) => {\n                          const newChanges = [...longRunChanges];\n                          newChanges[i] = Number(e.target.value);\n                          setLongRunChanges(newChanges);\n                        }}\n                        placeholder=\"Langer Lauf %\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"buttons is-centered\">\n              <button\n                className=\"button is-primary\"\n                onClick={calculateVolumes}\n              >\n                Berechnen\n              </button>\n              <button\n                className=\"button is-light\"\n                onClick={resetForm}\n              >\n                Zurücksetzen\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"column is-half\">\n          <div className=\"box\">\n            <h2 className=\"title is-4 has-text-blue\">Ergebnisse</h2>\n            {results.length > 0 ? (\n              <table className=\"table is-striped is-fullwidth\">\n                <thead>\n                  <tr>\n                    <th>Woche</th>\n                    <th>Volumen (h:min)</th>\n                    <th>Langer Lauf (min)</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {results.map((r) => (\n                    <tr key={r.week}>\n                      <td>{r.week}</td>\n                      <td>\n                        {Math.floor(r.totalMinutes / 60)}h {r.totalMinutes % 60}min\n                      </td>\n                      <td>{r.longRunMinutes}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            ) : (\n              <p className=\"has-text-grey\">Noch keine Berechnung durchgeführt.</p>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bulma/css/bulma.min.css';\n \n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}